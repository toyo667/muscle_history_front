/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'id': string;
    /**
     * 
     * @type {ConditionFeelEnum}
     * @memberof Condition
     */
    'feel': ConditionFeelEnum;
    /**
     * 
     * @type {number}
     * @memberof Condition
     */
    'order': number;
}


/**
 * * `best` - 最高！ * `better` - いい感じ * `normal` - 普通 * `bad` - 良くはない * `so_bad` - 悪い * `cannot` - 無理
 * @export
 * @enum {string}
 */

export const ConditionFeelEnum = {
    Best: 'best',
    Better: 'better',
    Normal: 'normal',
    Bad: 'bad',
    SoBad: 'so_bad',
    Cannot: 'cannot'
} as const;

export type ConditionFeelEnum = typeof ConditionFeelEnum[keyof typeof ConditionFeelEnum];


/**
 * 
 * @export
 * @interface PatchedWorkout
 */
export interface PatchedWorkout {
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkout
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkout
     */
    'training_item'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkout
     */
    'feeling'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkout
     */
    'session'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedWorkout
     */
    'rep_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedWorkout
     */
    'set_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedWorkout
     */
    'weight_kg'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkout
     */
    'trained_at'?: string;
}
/**
 * 
 * @export
 * @interface PatchedWorkoutItem
 */
export interface PatchedWorkoutItem {
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkoutItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkoutItem
     */
    'training_name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedWorkoutItem
     */
    'category'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PatchedWorkoutSession
 */
export interface PatchedWorkoutSession {
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkoutSession
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkoutSession
     */
    'started_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkoutSession
     */
    'finished_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedWorkoutSession
     */
    'condition'?: string;
}
/**
 * 
 * @export
 * @interface TrainingArea
 */
export interface TrainingArea {
    /**
     * 
     * @type {string}
     * @memberof TrainingArea
     */
    'id': string;
    /**
     * 
     * @type {TrainingAreaEnum}
     * @memberof TrainingArea
     */
    'training_area': TrainingAreaEnum;
    /**
     * 
     * @type {number}
     * @memberof TrainingArea
     */
    'order': number;
}


/**
 * * `arm` - 腕 * `back` - 背中 * `chest` - 胸 * `leg` - 脚 * `abdominal` - 腹
 * @export
 * @enum {string}
 */

export const TrainingAreaEnum = {
    Arm: 'arm',
    Back: 'back',
    Chest: 'chest',
    Leg: 'leg',
    Abdominal: 'abdominal'
} as const;

export type TrainingAreaEnum = typeof TrainingAreaEnum[keyof typeof TrainingAreaEnum];


/**
 * shema生成用
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_login'?: string | null;
    /**
     * Designates that this user has all permissions without explicitly assigning them.
     * @type {boolean}
     * @memberof User
     */
    'is_superuser'?: boolean;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * Designates whether the user can log into this admin site.
     * @type {boolean}
     * @memberof User
     */
    'is_staff'?: boolean;
    /**
     * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
     * @type {boolean}
     * @memberof User
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'date_joined'?: string;
}
/**
 * 
 * @export
 * @interface Workout
 */
export interface Workout {
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'training_item': string;
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'feeling': string;
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'session': string;
    /**
     * 
     * @type {number}
     * @memberof Workout
     */
    'rep_count': number;
    /**
     * 
     * @type {number}
     * @memberof Workout
     */
    'set_count': number;
    /**
     * 
     * @type {number}
     * @memberof Workout
     */
    'weight_kg': number;
    /**
     * 
     * @type {string}
     * @memberof Workout
     */
    'trained_at': string;
}
/**
 * 
 * @export
 * @interface WorkoutFeeling
 */
export interface WorkoutFeeling {
    /**
     * 
     * @type {string}
     * @memberof WorkoutFeeling
     */
    'id': string;
    /**
     * 
     * @type {WorkoutFeelingFeelEnum}
     * @memberof WorkoutFeeling
     */
    'feel': WorkoutFeelingFeelEnum;
    /**
     * 
     * @type {number}
     * @memberof WorkoutFeeling
     */
    'order': number;
}


/**
 * * `too_easy` - 簡単すぎ * `easy` - 簡単 * `normal` - 普通 * `hard` - きつい * `too_hard` - キツすぎ * `cannot` - 無理
 * @export
 * @enum {string}
 */

export const WorkoutFeelingFeelEnum = {
    TooEasy: 'too_easy',
    Easy: 'easy',
    Normal: 'normal',
    Hard: 'hard',
    TooHard: 'too_hard',
    Cannot: 'cannot'
} as const;

export type WorkoutFeelingFeelEnum = typeof WorkoutFeelingFeelEnum[keyof typeof WorkoutFeelingFeelEnum];


/**
 * 
 * @export
 * @interface WorkoutItem
 */
export interface WorkoutItem {
    /**
     * 
     * @type {string}
     * @memberof WorkoutItem
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutItem
     */
    'training_name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkoutItem
     */
    'category': Array<string>;
}
/**
 * 
 * @export
 * @interface WorkoutSession
 */
export interface WorkoutSession {
    /**
     * 
     * @type {string}
     * @memberof WorkoutSession
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutSession
     */
    'started_at': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutSession
     */
    'finished_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkoutSession
     */
    'condition': string;
}

/**
 * AuthenticateApi - axios parameter creator
 * @export
 */
export const AuthenticateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * セッションからユーザ情報を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UserGetInfoRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/get_info/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticateApi - functional programming interface
 * @export
 */
export const AuthenticateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticateApiAxiosParamCreator(configuration)
    return {
        /**
         * セッションからユーザ情報を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UserGetInfoRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UserGetInfoRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthenticateApi.v1UserGetInfoRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthenticateApi - factory interface
 * @export
 */
export const AuthenticateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticateApiFp(configuration)
    return {
        /**
         * セッションからユーザ情報を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UserGetInfoRetrieve(options?: any): AxiosPromise<User> {
            return localVarFp.v1UserGetInfoRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticateApi - object-oriented interface
 * @export
 * @class AuthenticateApi
 * @extends {BaseAPI}
 */
export class AuthenticateApi extends BaseAPI {
    /**
     * セッションからユーザ情報を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApi
     */
    public v1UserGetInfoRetrieve(options?: RawAxiosRequestConfig) {
        return AuthenticateApiFp(this.configuration).v1UserGetInfoRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MasterApi - axios parameter creator
 * @export
 */
export const MasterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ConditionList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/condition/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TrainingAreaList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/training-area/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutFeelingList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workout-feeling/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterApi - functional programming interface
 * @export
 */
export const MasterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MasterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ConditionList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Condition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ConditionList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MasterApi.v1ConditionList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TrainingAreaList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainingArea>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TrainingAreaList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MasterApi.v1TrainingAreaList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutFeelingList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkoutFeeling>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutFeelingList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MasterApi.v1WorkoutFeelingList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MasterApi - factory interface
 * @export
 */
export const MasterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MasterApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ConditionList(options?: any): AxiosPromise<Array<Condition>> {
            return localVarFp.v1ConditionList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TrainingAreaList(options?: any): AxiosPromise<Array<TrainingArea>> {
            return localVarFp.v1TrainingAreaList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutFeelingList(options?: any): AxiosPromise<Array<WorkoutFeeling>> {
            return localVarFp.v1WorkoutFeelingList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MasterApi - object-oriented interface
 * @export
 * @class MasterApi
 * @extends {BaseAPI}
 */
export class MasterApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterApi
     */
    public v1ConditionList(options?: RawAxiosRequestConfig) {
        return MasterApiFp(this.configuration).v1ConditionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterApi
     */
    public v1TrainingAreaList(options?: RawAxiosRequestConfig) {
        return MasterApiFp(this.configuration).v1TrainingAreaList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterApi
     */
    public v1WorkoutFeelingList(options?: RawAxiosRequestConfig) {
        return MasterApiFp(this.configuration).v1WorkoutFeelingList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(format, lang, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SchemaApi.schemaRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {SchemaRetrieveFormatEnum} [format] 
         * @param {SchemaRetrieveLangEnum} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {SchemaRetrieveFormatEnum} [format] 
     * @param {SchemaRetrieveLangEnum} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(format?: SchemaRetrieveFormatEnum, lang?: SchemaRetrieveLangEnum, options?: RawAxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SchemaRetrieveFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type SchemaRetrieveFormatEnum = typeof SchemaRetrieveFormatEnum[keyof typeof SchemaRetrieveFormatEnum];
/**
 * @export
 */
export const SchemaRetrieveLangEnum = {
    Af: 'af',
    Ar: 'ar',
    ArDz: 'ar-dz',
    Ast: 'ast',
    Az: 'az',
    Be: 'be',
    Bg: 'bg',
    Bn: 'bn',
    Br: 'br',
    Bs: 'bs',
    Ca: 'ca',
    Ckb: 'ckb',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    Dsb: 'dsb',
    El: 'el',
    En: 'en',
    EnAu: 'en-au',
    EnGb: 'en-gb',
    Eo: 'eo',
    Es: 'es',
    EsAr: 'es-ar',
    EsCo: 'es-co',
    EsMx: 'es-mx',
    EsNi: 'es-ni',
    EsVe: 'es-ve',
    Et: 'et',
    Eu: 'eu',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Fy: 'fy',
    Ga: 'ga',
    Gd: 'gd',
    Gl: 'gl',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hsb: 'hsb',
    Hu: 'hu',
    Hy: 'hy',
    Ia: 'ia',
    Id: 'id',
    Ig: 'ig',
    Io: 'io',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ka: 'ka',
    Kab: 'kab',
    Kk: 'kk',
    Km: 'km',
    Kn: 'kn',
    Ko: 'ko',
    Ky: 'ky',
    Lb: 'lb',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mn: 'mn',
    Mr: 'mr',
    Ms: 'ms',
    My: 'my',
    Nb: 'nb',
    Ne: 'ne',
    Nl: 'nl',
    Nn: 'nn',
    Os: 'os',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    PtBr: 'pt-br',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sq: 'sq',
    Sr: 'sr',
    SrLatn: 'sr-latn',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Tg: 'tg',
    Th: 'th',
    Tk: 'tk',
    Tr: 'tr',
    Tt: 'tt',
    Udm: 'udm',
    Ug: 'ug',
    Uk: 'uk',
    Ur: 'ur',
    Uz: 'uz',
    Vi: 'vi',
    ZhHans: 'zh-hans',
    ZhHant: 'zh-hant'
} as const;
export type SchemaRetrieveLangEnum = typeof SchemaRetrieveLangEnum[keyof typeof SchemaRetrieveLangEnum];


/**
 * WorkoutApi - axios parameter creator
 * @export
 */
export const WorkoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ワークアウト内容
         * @param {Workout} workout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutCreate: async (workout: Workout, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workout' is not null or undefined
            assertParamExists('v1WorkoutCreate', 'workout', workout)
            const localVarPath = `/api/v1/workout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutDestroy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutDestroy', 'id', id)
            const localVarPath = `/api/v1/workout/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウト内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {PatchedWorkout} [patchedWorkout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutPartialUpdate: async (id: string, patchedWorkout?: PatchedWorkout, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/workout/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWorkout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutRetrieve', 'id', id)
            const localVarPath = `/api/v1/workout/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {Workout} workout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutUpdate: async (id: string, workout: Workout, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutUpdate', 'id', id)
            // verify required parameter 'workout' is not null or undefined
            assertParamExists('v1WorkoutUpdate', 'workout', workout)
            const localVarPath = `/api/v1/workout/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workout, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutApi - functional programming interface
 * @export
 */
export const WorkoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutApiAxiosParamCreator(configuration)
    return {
        /**
         * ワークアウト内容
         * @param {Workout} workout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutCreate(workout: Workout, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutCreate(workout, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.v1WorkoutCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutDestroy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.v1WorkoutDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウト内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workout>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.v1WorkoutList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {PatchedWorkout} [patchedWorkout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutPartialUpdate(id: string, patchedWorkout?: PatchedWorkout, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutPartialUpdate(id, patchedWorkout, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.v1WorkoutPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.v1WorkoutRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {Workout} workout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutUpdate(id: string, workout: Workout, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutUpdate(id, workout, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutApi.v1WorkoutUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkoutApi - factory interface
 * @export
 */
export const WorkoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutApiFp(configuration)
    return {
        /**
         * ワークアウト内容
         * @param {Workout} workout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutCreate(workout: Workout, options?: any): AxiosPromise<Workout> {
            return localVarFp.v1WorkoutCreate(workout, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1WorkoutDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウト内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutList(options?: any): AxiosPromise<Array<Workout>> {
            return localVarFp.v1WorkoutList(options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {PatchedWorkout} [patchedWorkout] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutPartialUpdate(id: string, patchedWorkout?: PatchedWorkout, options?: any): AxiosPromise<Workout> {
            return localVarFp.v1WorkoutPartialUpdate(id, patchedWorkout, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutRetrieve(id: string, options?: any): AxiosPromise<Workout> {
            return localVarFp.v1WorkoutRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウト内容
         * @param {string} id A UUID string identifying this ワークアウト.
         * @param {Workout} workout 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutUpdate(id: string, workout: Workout, options?: any): AxiosPromise<Workout> {
            return localVarFp.v1WorkoutUpdate(id, workout, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutApi - object-oriented interface
 * @export
 * @class WorkoutApi
 * @extends {BaseAPI}
 */
export class WorkoutApi extends BaseAPI {
    /**
     * ワークアウト内容
     * @param {Workout} workout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public v1WorkoutCreate(workout: Workout, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).v1WorkoutCreate(workout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウト内容
     * @param {string} id A UUID string identifying this ワークアウト.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public v1WorkoutDestroy(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).v1WorkoutDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウト内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public v1WorkoutList(options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).v1WorkoutList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウト内容
     * @param {string} id A UUID string identifying this ワークアウト.
     * @param {PatchedWorkout} [patchedWorkout] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public v1WorkoutPartialUpdate(id: string, patchedWorkout?: PatchedWorkout, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).v1WorkoutPartialUpdate(id, patchedWorkout, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウト内容
     * @param {string} id A UUID string identifying this ワークアウト.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public v1WorkoutRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).v1WorkoutRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウト内容
     * @param {string} id A UUID string identifying this ワークアウト.
     * @param {Workout} workout 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutApi
     */
    public v1WorkoutUpdate(id: string, workout: Workout, options?: RawAxiosRequestConfig) {
        return WorkoutApiFp(this.configuration).v1WorkoutUpdate(id, workout, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkoutItemApi - axios parameter creator
 * @export
 */
export const WorkoutItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * トレーニング種目
         * @param {WorkoutItem} workoutItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemCreate: async (workoutItem: WorkoutItem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workoutItem' is not null or undefined
            assertParamExists('v1WorkoutItemCreate', 'workoutItem', workoutItem)
            const localVarPath = `/api/v1/workout-item/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemDestroy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutItemDestroy', 'id', id)
            const localVarPath = `/api/v1/workout-item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレーニング種目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workout-item/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {PatchedWorkoutItem} [patchedWorkoutItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemPartialUpdate: async (id: string, patchedWorkoutItem?: PatchedWorkoutItem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutItemPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/workout-item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWorkoutItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutItemRetrieve', 'id', id)
            const localVarPath = `/api/v1/workout-item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {WorkoutItem} workoutItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemUpdate: async (id: string, workoutItem: WorkoutItem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutItemUpdate', 'id', id)
            // verify required parameter 'workoutItem' is not null or undefined
            assertParamExists('v1WorkoutItemUpdate', 'workoutItem', workoutItem)
            const localVarPath = `/api/v1/workout-item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutItemApi - functional programming interface
 * @export
 */
export const WorkoutItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutItemApiAxiosParamCreator(configuration)
    return {
        /**
         * トレーニング種目
         * @param {WorkoutItem} workoutItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutItemCreate(workoutItem: WorkoutItem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutItemCreate(workoutItem, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutItemApi.v1WorkoutItemCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutItemDestroy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutItemDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutItemApi.v1WorkoutItemDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * トレーニング種目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutItemList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkoutItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutItemList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutItemApi.v1WorkoutItemList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {PatchedWorkoutItem} [patchedWorkoutItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutItemPartialUpdate(id: string, patchedWorkoutItem?: PatchedWorkoutItem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutItemPartialUpdate(id, patchedWorkoutItem, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutItemApi.v1WorkoutItemPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutItemRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutItemRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutItemApi.v1WorkoutItemRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {WorkoutItem} workoutItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutItemUpdate(id: string, workoutItem: WorkoutItem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutItemUpdate(id, workoutItem, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutItemApi.v1WorkoutItemUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkoutItemApi - factory interface
 * @export
 */
export const WorkoutItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutItemApiFp(configuration)
    return {
        /**
         * トレーニング種目
         * @param {WorkoutItem} workoutItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemCreate(workoutItem: WorkoutItem, options?: any): AxiosPromise<WorkoutItem> {
            return localVarFp.v1WorkoutItemCreate(workoutItem, options).then((request) => request(axios, basePath));
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1WorkoutItemDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * トレーニング種目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemList(options?: any): AxiosPromise<Array<WorkoutItem>> {
            return localVarFp.v1WorkoutItemList(options).then((request) => request(axios, basePath));
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {PatchedWorkoutItem} [patchedWorkoutItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemPartialUpdate(id: string, patchedWorkoutItem?: PatchedWorkoutItem, options?: any): AxiosPromise<WorkoutItem> {
            return localVarFp.v1WorkoutItemPartialUpdate(id, patchedWorkoutItem, options).then((request) => request(axios, basePath));
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemRetrieve(id: string, options?: any): AxiosPromise<WorkoutItem> {
            return localVarFp.v1WorkoutItemRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * トレーニング種目
         * @param {string} id A UUID string identifying this トレーニング種目.
         * @param {WorkoutItem} workoutItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutItemUpdate(id: string, workoutItem: WorkoutItem, options?: any): AxiosPromise<WorkoutItem> {
            return localVarFp.v1WorkoutItemUpdate(id, workoutItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutItemApi - object-oriented interface
 * @export
 * @class WorkoutItemApi
 * @extends {BaseAPI}
 */
export class WorkoutItemApi extends BaseAPI {
    /**
     * トレーニング種目
     * @param {WorkoutItem} workoutItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutItemApi
     */
    public v1WorkoutItemCreate(workoutItem: WorkoutItem, options?: RawAxiosRequestConfig) {
        return WorkoutItemApiFp(this.configuration).v1WorkoutItemCreate(workoutItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレーニング種目
     * @param {string} id A UUID string identifying this トレーニング種目.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutItemApi
     */
    public v1WorkoutItemDestroy(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutItemApiFp(this.configuration).v1WorkoutItemDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレーニング種目
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutItemApi
     */
    public v1WorkoutItemList(options?: RawAxiosRequestConfig) {
        return WorkoutItemApiFp(this.configuration).v1WorkoutItemList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレーニング種目
     * @param {string} id A UUID string identifying this トレーニング種目.
     * @param {PatchedWorkoutItem} [patchedWorkoutItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutItemApi
     */
    public v1WorkoutItemPartialUpdate(id: string, patchedWorkoutItem?: PatchedWorkoutItem, options?: RawAxiosRequestConfig) {
        return WorkoutItemApiFp(this.configuration).v1WorkoutItemPartialUpdate(id, patchedWorkoutItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレーニング種目
     * @param {string} id A UUID string identifying this トレーニング種目.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutItemApi
     */
    public v1WorkoutItemRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutItemApiFp(this.configuration).v1WorkoutItemRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トレーニング種目
     * @param {string} id A UUID string identifying this トレーニング種目.
     * @param {WorkoutItem} workoutItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutItemApi
     */
    public v1WorkoutItemUpdate(id: string, workoutItem: WorkoutItem, options?: RawAxiosRequestConfig) {
        return WorkoutItemApiFp(this.configuration).v1WorkoutItemUpdate(id, workoutItem, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkoutSessionApi - axios parameter creator
 * @export
 */
export const WorkoutSessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 現在アクティブになっているワークアウトセッションを取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionActiveRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workout-session/active/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {WorkoutSession} [workoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionCreate: async (workoutSession?: WorkoutSession, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workout-session/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutSession, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionDestroy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutSessionDestroy', 'id', id)
            const localVarPath = `/api/v1/workout-session/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workout-session/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {PatchedWorkoutSession} [patchedWorkoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionPartialUpdate: async (id: string, patchedWorkoutSession?: PatchedWorkoutSession, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutSessionPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/workout-session/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedWorkoutSession, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutSessionRetrieve', 'id', id)
            const localVarPath = `/api/v1/workout-session/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {WorkoutSession} [workoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionUpdate: async (id: string, workoutSession?: WorkoutSession, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1WorkoutSessionUpdate', 'id', id)
            const localVarPath = `/api/v1/workout-session/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutSession, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutSessionApi - functional programming interface
 * @export
 */
export const WorkoutSessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutSessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 現在アクティブになっているワークアウトセッションを取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionActiveRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionActiveRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionActiveRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {WorkoutSession} [workoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionCreate(workoutSession?: WorkoutSession, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionCreate(workoutSession, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionDestroy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkoutSession>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {PatchedWorkoutSession} [patchedWorkoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionPartialUpdate(id: string, patchedWorkoutSession?: PatchedWorkoutSession, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionPartialUpdate(id, patchedWorkoutSession, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {WorkoutSession} [workoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkoutSessionUpdate(id: string, workoutSession?: WorkoutSession, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1WorkoutSessionUpdate(id, workoutSession, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkoutSessionApi.v1WorkoutSessionUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkoutSessionApi - factory interface
 * @export
 */
export const WorkoutSessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutSessionApiFp(configuration)
    return {
        /**
         * 現在アクティブになっているワークアウトセッションを取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionActiveRetrieve(options?: any): AxiosPromise<WorkoutSession> {
            return localVarFp.v1WorkoutSessionActiveRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {WorkoutSession} [workoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionCreate(workoutSession?: WorkoutSession, options?: any): AxiosPromise<WorkoutSession> {
            return localVarFp.v1WorkoutSessionCreate(workoutSession, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1WorkoutSessionDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionList(options?: any): AxiosPromise<Array<WorkoutSession>> {
            return localVarFp.v1WorkoutSessionList(options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {PatchedWorkoutSession} [patchedWorkoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionPartialUpdate(id: string, patchedWorkoutSession?: PatchedWorkoutSession, options?: any): AxiosPromise<WorkoutSession> {
            return localVarFp.v1WorkoutSessionPartialUpdate(id, patchedWorkoutSession, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionRetrieve(id: string, options?: any): AxiosPromise<WorkoutSession> {
            return localVarFp.v1WorkoutSessionRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークアウトセッション(1回のトレーニング)
         * @param {string} id A UUID string identifying this ワークアウトセッション.
         * @param {WorkoutSession} [workoutSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkoutSessionUpdate(id: string, workoutSession?: WorkoutSession, options?: any): AxiosPromise<WorkoutSession> {
            return localVarFp.v1WorkoutSessionUpdate(id, workoutSession, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutSessionApi - object-oriented interface
 * @export
 * @class WorkoutSessionApi
 * @extends {BaseAPI}
 */
export class WorkoutSessionApi extends BaseAPI {
    /**
     * 現在アクティブになっているワークアウトセッションを取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionActiveRetrieve(options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionActiveRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウトセッション(1回のトレーニング)
     * @param {WorkoutSession} [workoutSession] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionCreate(workoutSession?: WorkoutSession, options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionCreate(workoutSession, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウトセッション(1回のトレーニング)
     * @param {string} id A UUID string identifying this ワークアウトセッション.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionDestroy(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウトセッション(1回のトレーニング)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionList(options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウトセッション(1回のトレーニング)
     * @param {string} id A UUID string identifying this ワークアウトセッション.
     * @param {PatchedWorkoutSession} [patchedWorkoutSession] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionPartialUpdate(id: string, patchedWorkoutSession?: PatchedWorkoutSession, options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionPartialUpdate(id, patchedWorkoutSession, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウトセッション(1回のトレーニング)
     * @param {string} id A UUID string identifying this ワークアウトセッション.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークアウトセッション(1回のトレーニング)
     * @param {string} id A UUID string identifying this ワークアウトセッション.
     * @param {WorkoutSession} [workoutSession] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutSessionApi
     */
    public v1WorkoutSessionUpdate(id: string, workoutSession?: WorkoutSession, options?: RawAxiosRequestConfig) {
        return WorkoutSessionApiFp(this.configuration).v1WorkoutSessionUpdate(id, workoutSession, options).then((request) => request(this.axios, this.basePath));
    }
}



